base_dir = File.expand_path(File.dirname(__FILE__))

# Define machine groups
cluster_nodes = {
  "cluster-node1" => { :ip => "192.168.56.11", :cpus => 1, :mem => 1024, :box => "debian/bookworm64", :disks => 2 },
  "cluster-node2" => { :ip => "192.168.56.12", :cpus => 1, :mem => 1024, :box => "debian/bookworm64", :disks => 2 },
  "cluster-node3" => { :ip => "192.168.56.13", :cpus => 1, :mem => 1024, :box => "debian/bookworm64", :disks => 2 },
  "cluster-node4" => { :ip => "192.168.56.14", :cpus => 1, :mem => 1024, :box => "debian/bookworm64", :disks => 2 },
}

nas_archlinux = {
  "nas-archlinux" => { :ip => "192.168.56.20", :cpus => 1, :mem => 1024, :box => "archlinux/archlinux", :disks => 6 },
}

required_plugins = %w(vagrant-cachier)

Vagrant.configure("2") do |config|
  plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
  if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
    if system "vagrant plugin install #{plugins_to_install.join(' ')}"
      exec "vagrant #{ARGV.join(' ')}"
    else
      abort "Installation of one or more plugins has failed. Aborting."
    end
  end

  # config.cache.scope = :box

  # config.cache.synced_folder_opts = {
  #   type: :nfs,
  #   # The nolock option can be useful for an NFSv3 client that wants to avoid the
  #   # NLM sideband protocol. Without this option, apt-get might hang if it tries
  #   # to lock files needed for /var/cache/* operations. All of this can be avoided
  #   # by using NFSv4 everywhere. Please note that the tcp option is not the default.
  #   mount_options: ['rw', 'vers=3', 'tcp', 'nolock']
  # }

  # Configure cluster nodes
  cluster_nodes.each_with_index do |(hostname, info), index|
    config.vm.define hostname do |cfg|
      cfg.ssh.insert_key = false
      cfg.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", "_keys/id_rsa"]

      cfg.vm.provider :virtualbox do |vb, override|
        config.vm.box = "#{info[:box]}"
        override.vm.network :private_network, ip: "#{info[:ip]}"

        vb.name = 'vagrant-' + hostname
        vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus], "--hwvirtex", "on" ]

        (1..info[:disks]).each do |i|
          # Create and attach disks
          disk = "disks/#{hostname}-#{i}.vdi"
          unless File.exist? (disk)
            vb.customize ['createhd', '--filename', disk, '--size', 1 * 1024]
          end
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', i, '--device', 0, '--type',  'hdd', '--medium', disk]
        end
      end

      # provision nodes with ansible
      if index == cluster_nodes.size - 1
        cfg.vm.provision :ansible do |ansible|
          ansible.config_file = "./ansible.cfg"
          ansible.inventory_path = "inventory/hosts"
          ansible.playbook = "./playbook.yml"
          ansible.limit = "all"
          ansible.extra_vars = './ansible-extra-vars.yml'
        end
      end
    end
  end

  # Configure NAS Arch Linux
  nas_archlinux.each do |hostname, info|
    config.vm.define hostname do |cfg|
      cfg.ssh.insert_key = false
      cfg.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key", "_keys/id_rsa"]

      cfg.vm.provider :virtualbox do |vb, override|
        override.vm.box = "#{info[:box]}"
        override.vm.network :private_network, ip: "#{info[:ip]}"

        vb.name = 'vagrant-' + hostname
        vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus], "--hwvirtex", "on" ]

        # Define the SATA controller
        vb.customize ["storagectl", :id, "--name", "SATAController", "--add", "sata", "--controller", "IntelAHCI"]

        (1..info[:disks]).each do |i|
          # Create and attach disks
          disk = "disks/#{hostname}-#{i}.vdi"
          unless File.exist? (disk)
            vb.customize ['createhd', '--filename', disk, '--size', 1 * 1024]
          end
          vb.customize ["storageattach", :id, "--storagectl", "SATAController", "--port", i, "--device", 0, "--type", "hdd", "--medium", disk]
        end
      end

      cfg.vm.provision "shell", inline: <<-SHELL
        mkdir -p /home/vagrant/.ssh
        cp /vagrant/_keys/id_rsa.pub /home/vagrant/.ssh/authorized_keys
        chown -R vagrant:vagrant /home/vagrant/.ssh
        chmod 700 /home/vagrant/.ssh
        chmod 600 /home/vagrant/.ssh/authorized_keys
      SHELL

      # Shell provisioner to install Python 3
      cfg.vm.provision "shell", inline: <<-SHELL
        sudo pacman -Sy --noconfirm
        sudo pacman -S --noconfirm python
        if ! command -v python3 &> /dev/null; then
          sudo pacman -S --noconfirm python3
        fi
      SHELL

      cfg.vm.provision :ansible do |ansible|
        # ansible.verbose = "vvvv"

        ansible.config_file = "./ansible.cfg"
        ansible.inventory_path = "inventory/hosts"
        ansible.playbook = "./playbooks/nas.yml"
        ansible.limit = "all" # Ansible hosts are identified by ip
        ansible.extra_vars = './ansible-extra-vars.yml'
      end # end provision
    end
  end
end
