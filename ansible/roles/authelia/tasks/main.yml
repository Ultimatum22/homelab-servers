---
- name: Create directories
  ansible.builtin.file:
    path: "{{ docker_authelia.config }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"

- name: Copy configuration files
  ansible.builtin.template:
    src: "{{ item }}.yml.j2"
    dest: "{{ docker_authelia.config }}/{{ item }}.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  loop:
    - configuration
    - users_database
  when: inventory_hostname == groups['cluster'][0]

- name: Create and start Authelia container
  community.docker.docker_swarm_service:
    name: authelia
    image: "{{ docker_authelia.image }}"
    networks:
      - homelab_private
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_private
      traefik.http.routers.auth.rule: "Host(`auth.{{ root_domain }}`)"
      traefik.http.routers.auth.entrypoints: https
      traefik.http.routers.auth.tls: "true"
      traefik.http.routers.auth.tls.certresolver: letsencrypt
      traefik.http.routers.auth.service: auth@swarm
      traefik.http.services.auth.loadbalancer.server.port: "9091"
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://auth.{{ root_domain }}
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: "true"
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email

      homepage.group: Home
      homepage.name: Authelia
      homepage.icon: authelia
      homepage.href: "http://{{ url_authelia }}"
      homepage.descripti"on: Easily add recipes into your database by providing the URL and Authelia will automatically import the relevant data.
    mounts:
      - source: "{{ docker_authelia.config }}"
        target: /config
        type: bind
    restart_config:
      condition: any
      delay: 5s
      max_attempts: 3
      window: 120s
    update_config:
      delay: 10s
      order: start-first
      parallelism: 1
    rollback_config:
      parallelism: 0
      order: stop-first
    state: present
    mode: replicated
    placement:
      constraints:
        - node.role == manager
  when: inventory_hostname == groups['cluster'][0]
