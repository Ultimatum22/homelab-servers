---
- name: Create network
  community.general.docker_network:
    name: "{{ item }}"
    driver: overlay
    scope: swarm
  with_items:
    - traefik
    - internal
  when: inventory_hostname == groups['cluster'][0]

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"
  with_items:
    - "{{ docker_pihole.config }}"
    - "{{ docker_pihole.data }}"

# - name: Copy configuration.yaml
#   ansible.builtin.template:
#     src: "configuration.yaml.j2"
#     dest: "{{ docker_pihole.config }}/configuration.yaml"
#     owner: "{{ ansible_user }}"
#     group: "{{ ansible_user }}"
#     mode: "0644"

- name: Create Pihole volumes
  community.docker.docker_volume:
    name: "{{ item }}"
  with_items:
    - pihole_config

- name: Deploy and start Pi-hole service
  community.docker.docker_swarm_service:
    name: pihole
    image: "{{ docker_pihole.image }}"
    publish:
      - target_port: 53
        published_port: 5353
        protocol: tcp
      - target_port: 53
        published_port: 5353
        protocol: udp
    mounts:
      - source: "{{ docker_pihole.config }}"
        target: /etc/pihole/
        type: bind
      - source: "{{ docker_pihole.data }}"
        target: /etc/dnsmasq.d/
        type: bind
    env:
      IPv6: "false"
      VIRTUAL_HOST: "pihole.{{ root_domain }}"
      WEBPASSWORD: "test123"
      TZ: "{{ system_timezone }}"
      PUID: "{{ ansible_user_pid | int }}"
      PGID: "{{ ansible_user_gid | int }}"
      FTL_CMD: "debug"
      DNSMASQ_LISTENING: "all"
    # extra_hosts:
    #   - "pihole.{{ root_domain }}:192.168.2.220"
    networks:
      - traefik
      - internal
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab-public

      # Traefik routing for Home Assistant
      traefik.http.routers.pihole.rule: "Host(`{{ url_pihole }}`)"
      traefik.http.routers.pihole.entrypoints: https
      traefik.http.routers.pihole.tls: "true"
      traefik.http.routers.pihole.tls.certresolver: letsencrypt
      # Authelia Authentication Middleware
      # traefik.http.routers.homeassistant.middlewares: auth@swarm

      traefik.http.services.pihole.loadbalancer.server.port: "80"

      homepage.group: Home
      homepage.name: PiHole
      homepage.icon: PiHole
      homepage.href: "https://{{ url_pihole }}"
      homepage.description: Home Assistant is free and open-source software used for home automation.

      # traefik.enable: "true"
      # traefik.http.routers.pihole.rule: "Host(`pihole.{{ root_domain }}`)"
      # traefik.http.routers.pihole.entrypoints: https
      # traefik.http.routers.pihole.tls: "true"
      # traefik.http.routers.pihole.tls.certresolver: letsencrypt
      # traefik.http.routers.pihole.service: pihole@swarm
      # # traefik.http.routers.pihole.middlewares: authelia@swarm
      # # traefik.http.routers.pihole.middlewares: authelia@swarm,pihole-addprefix@file,pihole-redirectregex@file
      # traefik.http.services.pihole.loadbalancer.server.port: "80"
    restart_config:
      condition: any
      delay: 5s
      max_attempts: 3
      window: 120s
    update_config:
      delay: 10s
      order: start-first
      parallelism: 1
    rollback_config:
      parallelism: 0
      order: stop-first
    state: present
    mode: replicated
    placement:
      constraints:
        - node.role == manager
  when: inventory_hostname == groups['cluster'][0]

- name: Create Pi-hole dnsmasq configuration
  ansible.builtin.copy:
    content: |
      server=/codecubed/{{ ansible_host }}:5353
    dest: "{{ docker_pihole.data }}/05-local.conf"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"
  # when: inventory_hostname == groups['cluster'][0]
