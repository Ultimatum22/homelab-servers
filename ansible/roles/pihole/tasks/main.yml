---
- name: Create network
  community.general.docker_network:
    name: "{{ item }}"
    driver: overlay
    scope: swarm
  with_items:
    - traefik
    - internal
  when: inventory_hostname == groups['cluster'][0]

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"
  with_items:
    - "{{ docker_pihole.config }}"
    - "{{ docker_pihole.data }}"

- name: Copy configuration.yaml
  ansible.builtin.template:
    src: "configuration.yaml.j2"
    dest: "{{ docker_pihole.config }}/configuration.yaml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Create Pihole volumes
  community.docker.docker_volume:
    name: "{{ item }}"
  with_items:
    - pihole_config

- name: Deploy and start Pi-hole service
  community.docker.docker_swarm_service:
    name: pihole
    image: pihole/pihole:latest
    dns:
      - 127.0.0.1
      - 192.168.1.1
      - 1.1.1.1
    publish:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 67
        published: 67
        protocol: udp
        mode: host
      # Uncomment if needed
      # - target: 80
      #   published: 80
      #   protocol: tcp
    volumes:
      - "{{ userdir }}/pihole/config:/etc/pihole/"
      - "{{ userdir }}/pihole/dnsmasq.d:/etc/dnsmasq.d/"
    env:
      ServerIP: 192.168.1.51
      IPv6: 'False'
      PROXY_LOCATION: pihole
      VIRTUAL_HOST: "pihole.{{ domainname }}"
      VIRTUAL_PORT: 80
      TZ: "{{ tz }}"
      WEBPASSWORD: "{{ pipass }}"
      DNSMASQ_LISTENING: all
      PUID: 1000
      PGID: 1000
    extra_hosts:
      - "pihole.{{ domainname }}:192.168.1.51"
    networks:
      - traefik
      - piholenet
    state: present
    mode: replicated
    replicas: 1
    endpoint_mode: vip
    update_config:
      parallelism: 1
      order: stop-first
      failure_action: rollback
      monitor: 2m
      delay: 15s
    restart_policy:
      condition: on-failure
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "HostRegexp:pihole.{{ domainname }},{catchall:.*}"
      traefik.frontend.priority: 1
      traefik.backend: pihole
      traefik.port: 80
  when: inventory_hostname == groups['cluster'][0]
