---
- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0775"
  with_items:
    - "{{ docker_pihole.config }}"
    - "{{ docker_pihole.data }}"

- name: Deploy and start Pi-hole service
  community.docker.docker_swarm_service:
    name: pihole
    image: "{{ docker_pihole.image }}"
    publish:
      - target_port: 53
        published_port: 53
        protocol: tcp
        mode: host
      - target_port: 53
        published_port: 53
        protocol: udp
        mode: host
      - target_port: 80
        published_port: 8484
        protocol: tcp
        mode: host
    cap_add:
      - NET_ADMIN
    env:
      TZ: "{{ system_timezone }}"
      VIRTUAL_HOST: "{{ url_pihole }}"
      VIRTUAL_PORT: "80"
      WEBPASSWORD: "test123"
    mounts:
      - source: "{{ docker_pihole.config }}"
        target: /etc/pihole/
        type: bind
      - source: "{{ docker_pihole.data }}"
        target: /etc/dnsmasq.d/
        type: bind
    networks:
      - homelab-public
    labels:
      traefik.enable: "true"

      # Traefik routing for PiHole
      traefik.http.routers.pihole.rule: "Host(`{{ url_pihole }}`)"
      traefik.http.routers.pihole.entrypoints: https
      traefik.http.routers.pihole.tls: "true"
      traefik.http.routers.pihole.tls.certresolver: letsencrypt

      # Authelia Authentication Middleware
      traefik.http.routers.pihole.middlewares: chain-no-auth@file

      traefik.http.services.pihole.loadbalancer.server.port: "80"

      homepage.group: Home
      homepage.name: PiHole
      homepage.icon: pi-hole
      homepage.href: "https://{{ url_pihole }}"
      homepage.description: Network-level blocking allows you to block ads in non-traditional places such as mobile apps and smart TVs, regardless of hardware or OS.
    restart_config:
      condition: any
      delay: 5s
      max_attempts: 3
      window: 120s
    update_config:
      delay: 10s
      order: start-first
      parallelism: 1
    rollback_config:
      parallelism: 0
      order: stop-first
    state: present
    mode: global
    # placement:
    #   constraints:
    #     - node.labels.task == light
