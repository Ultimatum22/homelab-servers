---
- name: Configure UFW
  ansible.builtin.include_tasks: ufw.yml

- name: Check if "Swarm Mode" is enabled.
  shell: docker info
  changed_when: false
  register: docker_info
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Init "Swarm Mode" on the first manager.
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and inventory_hostname == groups['cluster_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: false
  register: docker_worker_token
  delegate_to: "{{ groups['cluster_manager'][0] }}"
  delegate_facts: true
  when: "'cluster_worker' in group_names"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Get the manager join-token.
  shell: docker swarm join-token -q manager
  changed_when: false
  register: docker_manager_token
  delegate_to: "{{ groups['cluster_manager'][0] }}"
  delegate_facts: true
  when: "'cluster_manager' in group_names
    and inventory_hostname != groups['cluster_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  when: "inventory_hostname == groups['cluster_manager'][0]"

- name: Distribute the fact containing address of the first Swarm manager.
  set_fact:
    docker_manager_address: "{{ hostvars[groups['cluster_manager'][0]]['docker_manager_address'] }}"
  when: "inventory_hostname != groups['cluster_manager'][0]"

- name: Join the pending Swarm worker nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: false
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'cluster_worker' in group_names
    and 'cluster_manager' not in group_names"
  tags:
    - skip_ansible_lint  # Suppressing the linter

- name: Join the pending Swarm manager nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_manager_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: false
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'cluster_manager' in group_names
    and inventory_hostname != groups['cluster_manager'][0]"
  tags:
    - skip_ansible_lint  # Suppressing the linter

# - name: Get list of labels.
#   command: >-
#          docker inspect
#          --format {% raw %}'{{ range $key, $value := .Spec.Labels }}{{ printf "%s\n" $key }}{{ end }}'{% endraw %}
#          {{ ansible_fqdn|lower }}
#   register: docker_swarm_labels
#   changed_when: false
#   delegate_to: "{{ groups['cluster_manager'][0] }}"
#   delegate_facts: true
#   tags:
#     - swarm_labels

# - name: Remove labels from swarm node.
#   command: docker node update --label-rm {{ item }} {{ ansible_fqdn|lower }}
#   with_items: "{{ docker_swarm_labels.stdout_lines }}"
#   when: item not in swarm_labels
#   delegate_to: "{{ groups['cluster_manager'][0] }}"
#   delegate_facts: true
#   tags:
#     - swarm_labels

# - name: Assign labels to swarm nodes if any.
#   command: docker node update --label-add {{ item }}=true {{ ansible_fqdn|lower }}
#   when: item not in docker_swarm_labels.stdout_lines
#   with_items:
#     - "{{ swarm_labels  | default([]) }}"
#   delegate_to: "{{ groups['cluster_manager'][0] }}"
#   delegate_facts: true
#   tags:
#     - swarm_labels