---
- name: Install required packages
  ansible.builtin.apt:
    package: "{{ item }}"
    state: present
  with_items:
    - python3-requests

- name: Create directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: 0775
  with_items:
    - "{{ docker_homepage.config }}"

- name: Create network
  docker_network:
    name: homelab

- name: Create directories for services
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ docker_user }}"
    group: "{{ docker_user }}"
    mode: 0775
  with_items:
    - "{{ postgres_data_dir }}"
    - "{{ homeassistant_config_dir }}"
    - "{{ nodered_data_dir }}"

- name: Create and start PostgreSQL container
  community.general.docker_container:
    name: postgres
    image: "{{ postgres_image }}"
    pull: yes
    recreate: true
    network_mode: host
    ports:
      - "{{ postgres_port }}:{{ postgres_port }}"
    volumes:
      - "{{ postgres_data_dir }}:/var/lib/postgresql/data"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      POSTGRES_USER: "{{ postgres_env.POSTGRES_USER }}"
      POSTGRES_PASSWORD: "{{ postgres_env.POSTGRES_PASSWORD }}"
    restart_policy: always
    state: started

- name: Create and start Home Assistant container
  community.general.docker_container:
    name: home-assistant
    image: "{{ homeassistant_image }}"
    pull: yes
    recreate: true
    network_mode: host
    depends_on:
      - postgres
    command: [ "python", "-m", "homeassistant", "--config", "/config", "--log-rotate-days", '3' ]
    volumes:
      - "{{ homeassistant_config_dir }}:/config"
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"
    ports:
      - "{{ item }}"
    with_items: "{{ homeassistant_ports }}"
    devices:
      - /dev/ttyUSB0
      - /dev/ttyUSB1
      - /dev/ttyACM0
    restart_policy: always
    privileged: true
    state: started

- name: Create and start Node-RED container
  community.general.docker_container:
    name: nodered
    image: "{{ nodered_image }}"
    pull: yes
    recreate: true
    network_mode: host
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "{{ nodered_data_dir }}:/data"
    ports:
      - "{{ nodered_port }}:{{ nodered_port }}"
    user: 'root'
    restart_policy: always
    state: started
